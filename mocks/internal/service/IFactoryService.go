// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Keyhenge/PowerFlexChallenge/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// IFactoryService is an autogenerated mock type for the IFactoryService type
type IFactoryService struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *IFactoryService) GetAll(ctx context.Context) (*model.Factories, error) {
	ret := _m.Called(ctx)

	var r0 *model.Factories
	if rf, ok := ret.Get(0).(func(context.Context) *model.Factories); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Factories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, factoryId
func (_m *IFactoryService) GetById(ctx context.Context, factoryId int64) (*model.Factory, error) {
	ret := _m.Called(ctx, factoryId)

	var r0 *model.Factory
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Factory); ok {
		r0 = rf(ctx, factoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Factory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, factoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, factory
func (_m *IFactoryService) New(ctx context.Context, factory *model.Factory) (int64, error) {
	ret := _m.Called(ctx, factory)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *model.Factory) int64); ok {
		r0 = rf(ctx, factory)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Factory) error); ok {
		r1 = rf(ctx, factory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/Keyhenge/PowerFlexChallenge/internal/model"
)

// ISprocketDB is an autogenerated mock type for the ISprocketDB type
type ISprocketDB struct {
	mock.Mock
}

// GetById provides a mock function with given fields: ctx, sprocketId
func (_m *ISprocketDB) GetById(ctx context.Context, sprocketId int64) (*model.Sprocket, error) {
	ret := _m.Called(ctx, sprocketId)

	var r0 *model.Sprocket
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Sprocket); ok {
		r0 = rf(ctx, sprocketId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Sprocket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, sprocketId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, sprocket
func (_m *ISprocketDB) New(ctx context.Context, sprocket *model.Sprocket) (int64, error) {
	ret := _m.Called(ctx, sprocket)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *model.Sprocket) int64); ok {
		r0 = rf(ctx, sprocket)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Sprocket) error); ok {
		r1 = rf(ctx, sprocket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, sprocket
func (_m *ISprocketDB) Update(ctx context.Context, sprocket *model.Sprocket) error {
	ret := _m.Called(ctx, sprocket)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Sprocket) error); ok {
		r0 = rf(ctx, sprocket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
